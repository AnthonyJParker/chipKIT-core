Purpose: To find any errors in the variants files
Board; ChipKit Pi v3.37

Digital I/O:

	Test that each digital I/O (D0, D1, D2, D3, D8, D9, D10, D11, D12, D13) can drive an LED High and Low

	Sketch: (With TEST_PIN changing to all GPIO)

		int TEST_PIN = 0;

		void setup() {                
		  pinMode(TEST_PIN, OUTPUT);     
		}

		void loop() {
		  digitalWrite(TEST_PIN, HIGH);
		  delay(50);
		  digitalWrite(TEST_PIN, LOW);
		  delay(50);
		}

	Results:
		D0 	works
		D1 	works
		D2 	works (J10 set for D2)
		D3 	works
		D8 	works (JP13 set for D8)
		D9 	works (JP12 set for D9)
		D10 works (JP14 set for SS)
		D11 works
		D12 works (JP8 set to MISO)
		D13 works

Analog Input:

	Test that each analog input (A0, A1, A4, A5) can read from 0 through 1023 when 0 to 3.3V is applied to each pin.

	Sketch (With TEST_ANALOG changed to each analog input pin):
	
		int TEST_ANALOG = A0;

		void setup() {
		  Serial.begin(9600);
		}

		void loop() {
		  int sensorValue = analogRead(TEST_ANALOG);
		  Serial.print("Value = ");
		  Serial.println(sensorValue, DEC);
		  delay(100);
		}

	Results:
		A0 works (JP15 set to A0)
		A1 works (JP11 set to A1)
		A4 works 
		A5 works


PWM Output:

Test that each PWM output (PWM0, and PWM1) can all output PWM signals.


UART:

	Test that the USB connector can be used for serial I/O from the sketch.

	Test that TXD/RXD (on D1/D0) can be used for serial I/O. (Serial)

	Test that TX2/RX2 (on Pi connector pin 8 and 10) can be used for serial I/O.

	Sketch:
		int inByte = 0;
		void setup()
		{
		  Serial.begin(9600);
		}

		void loop()
		{
		  if (Serial.available() > 0) {
			inByte = Serial.read();
			Serial.print(inByte, DEC);
		  }
		  delay(250);
		}
		
	Results:
		TXD/RXD works (JP9 set to RX1 and JP7 set to RX1) (Serial)
		TX2/RX2 works (JP4 set to TX2 and JP1 set to RX2) (Serial1)
		USB does not work (JP13 set to RD+ and JP12 set to RD-, and use chipKIT Pi USB_serial board) (Serial)

Change Notice:

Test that all CN inputs can be used to trigger an interrupt.

	Currently no Change Notification library exists for chipKIT, and so these CN inputs have to be hard-coded. 
	Thus they are not being tested here.

Interrupts:

Test that INT1 and INT2 can be used to trigger an interrupt

	Sketch:
		// Move a wire from pin 12 to each of the hardware interrupt pins to show that
		// they print out the proper message.
		#define pinSrc 12 // used as external interrupt stimulator

		void int0Handle();
		void int1Handle();
		void int2Handle();
		void int3Handle();
		void int4Handle();

		int x;

		void setup() 
		{
		  
		  Serial1.begin(9600);               // Turn on UART to pi
		  digitalWrite(PIN_LED1, LOW);      // Start of with LED off
		  pinMode(PIN_LED1, OUTPUT);        // Make LED pin an output
		  pinMode(PIN_INT0, INPUT);         // Interrupt pin must be an input
		  pinMode(PIN_INT1, INPUT);         // Interrupt pin must be an input
		  pinMode(PIN_INT2, INPUT);         // Interrupt pin must be an input
		  pinMode(PIN_INT3, INPUT);         // Interrupt pin must be an input
		  pinMode(PIN_INT4, INPUT);         // Interrupt pin must be an input
		  digitalWrite(pinSrc, LOW);        // Simulator pin must start low
		  pinMode(pinSrc, OUTPUT);          // And stim pin must be output too
		  attachInterrupt(0, int0Handle, RISING); // Register interrupt function on Int0
		  attachInterrupt(1, int1Handle, RISING); // Register interrupt function on Int1
		  attachInterrupt(2, int2Handle, RISING); // Register interrupt function on Int2
		  attachInterrupt(3, int3Handle, RISING); // Register interrupt function on Int3
		  attachInterrupt(4, int4Handle, RISING); // Register interrupt function on Int4
		}

		void loop() 
		{
		   digitalWrite(pinSrc, HIGH);      // Set stim pin high (triggers interrupt)
		   delay(1000);                      // wait half a second
		   Serial1.println("Main loop tick");
		   digitalWrite(pinSrc, LOW);       // Set stim pin low
		   delay(1000);                      // wait another half second
		}

		// This function gets called when an external interrupt occurs
		void int0Handle() 
		{
		  digitalWrite(PIN_LED1, !digitalRead(PIN_LED1));
		  Serial1.println("int0Handler() triggered");
		}

		void int1Handle() 
		{
		  digitalWrite(PIN_LED1, !digitalRead(PIN_LED1));
		  Serial1.println("int1Handler() triggered");
		}

		void int2Handle() 
		{
		  digitalWrite(PIN_LED1, !digitalRead(PIN_LED1));
		  Serial1.println("int2Handler() triggered");
		}

		void int3Handle() 
		{
		  digitalWrite(PIN_LED1, !digitalRead(PIN_LED1));
		  Serial1.println("int3Handler() triggered");
		}

		void int4Handle() 
		{
		  digitalWrite(PIN_LED1, !digitalRead(PIN_LED1));
		  Serial1.println("int4Handler() triggered");
		}
	
	Results:
		All 5 external interrupts (on pin 

SPI:

Test that a SPI peripheral can be communicated with on SCK, MISO, MOSI and SS.


I2C:

Test that an I2C peripheral can be communicated with on SDA/SCL.


EEPROM;

Test that the EEPROM section of Flash is usable for both reading and writing.


Virtual Bootloader Button:

Test that the virtual bootloader button function works to trigger the bootloader from a sketch.